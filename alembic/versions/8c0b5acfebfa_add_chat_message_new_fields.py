"""add chat_message new fields

Revision ID: 8c0b5acfebfa
Revises: 2605fe1c581f
Create Date: 2025-08-03 23:20:51.886351

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8c0b5acfebfa'
down_revision: Union[str, Sequence[str], None] = '2605fe1c581f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('bulk_structure',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('formula', sa.String(), nullable=True),
    sa.Column('structure_data', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('calculation_parameter',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('structure_type', sa.String(), nullable=True),
    sa.Column('structure_id', sa.Integer(), nullable=True),
    sa.Column('engine', sa.String(), nullable=True),
    sa.Column('task_type', sa.String(), nullable=True),
    sa.Column('incar_settings', sa.JSON(), nullable=True),
    sa.Column('input_files', sa.JSON(), nullable=True),
    sa.Column('explanation', sa.Text(), nullable=True),
    sa.Column('suggestions', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('modification_structure',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('parent_type', sa.String(), nullable=True),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('modification_type', sa.String(), nullable=True),
    sa.Column('parameters', sa.JSON(), nullable=True),
    sa.Column('modified_data', sa.JSON(), nullable=True),
    sa.Column('cif_path', sa.String(), nullable=True),
    sa.Column('poscar_path', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('job_schedule',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('calculation_id', sa.Integer(), nullable=True),
    sa.Column('scheduler_type', sa.String(), nullable=True),
    sa.Column('cluster_name', sa.String(), nullable=True),
    sa.Column('queue', sa.String(), nullable=True),
    sa.Column('nodes', sa.Integer(), nullable=True),
    sa.Column('ntasks_per_node', sa.Integer(), nullable=True),
    sa.Column('walltime', sa.String(), nullable=True),
    sa.Column('submission_script', sa.Text(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('submitted_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['calculation_id'], ['calculation_parameter.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('post_analysis',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('calculation_id', sa.Integer(), nullable=True),
    sa.Column('analysis_type', sa.String(), nullable=True),
    sa.Column('input_files', sa.JSON(), nullable=True),
    sa.Column('extracted_data', sa.JSON(), nullable=True),
    sa.Column('plots', sa.JSON(), nullable=True),
    sa.Column('llm_summary', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['calculation_id'], ['calculation_parameter.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('slab_structure',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('bulk_id', sa.Integer(), nullable=True),
    sa.Column('miller_index', sa.String(), nullable=False),
    sa.Column('supercell_size', sa.String(), nullable=True),
    sa.Column('layers', sa.Integer(), nullable=True),
    sa.Column('fixed_layers', sa.Integer(), nullable=True),
    sa.Column('vacuum_thickness', sa.Float(), nullable=True),
    sa.Column('termination', sa.String(), nullable=True),
    sa.Column('shift', sa.Float(), nullable=True),
    sa.Column('symmetry_reduction', sa.Boolean(), nullable=True),
    sa.Column('is_symmetric_slab', sa.Boolean(), nullable=True),
    sa.Column('min_slab_size', sa.Float(), nullable=True),
    sa.Column('min_vacuum_size', sa.Float(), nullable=True),
    sa.Column('slab_data', sa.JSON(), nullable=True),
    sa.Column('cif_path', sa.String(), nullable=True),
    sa.Column('poscar_path', sa.String(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['bulk_id'], ['bulk_structure.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('adsorption_structure',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('slab_id', sa.Integer(), nullable=True),
    sa.Column('adsorbate_name', sa.String(), nullable=True),
    sa.Column('adsorbate_formula', sa.String(), nullable=True),
    sa.Column('adsorption_site', sa.String(), nullable=True),
    sa.Column('site_coordinates', sa.JSON(), nullable=True),
    sa.Column('coverage', sa.Float(), nullable=True),
    sa.Column('orientation', sa.JSON(), nullable=True),
    sa.Column('height_above_surface', sa.Float(), nullable=True),
    sa.Column('is_relaxed', sa.Boolean(), nullable=True),
    sa.Column('adsorption_energy', sa.Float(), nullable=True),
    sa.Column('cif_path', sa.String(), nullable=True),
    sa.Column('poscar_path', sa.String(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['slab_id'], ['slab_structure.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('wiki')
    op.drop_table('task_object_phrase')
    op.drop_table('material')
    op.drop_table('paper')
    op.add_column('chat_message', sa.Column('intent_stage', sa.String(), nullable=True))
    op.add_column('chat_message', sa.Column('intent_area', sa.String(), nullable=True))
    op.add_column('chat_message', sa.Column('specific_intent', sa.String(), nullable=True))
    op.create_foreign_key(None, 'chat_message', 'chat_message', ['parent_id'], ['id'])
    op.drop_column('chat_message', 'source')
    op.drop_column('chat_message', 'intent')
    op.alter_column('chat_session', 'tags',
               existing_type=sa.VARCHAR(),
               type_=sa.JSON(),
               postgresql_using="tags::json",
               existing_nullable=True)
    op.drop_column('chat_session', 'meta')
    op.add_column('hypothesis', sa.Column('intent_stage', sa.String(), nullable=True))
    op.add_column('hypothesis', sa.Column('intent_area', sa.String(), nullable=True))
    op.alter_column('hypothesis', 'tags',
           existing_type=sa.VARCHAR(),
           type_=sa.JSON(),
           existing_nullable=True,
           postgresql_using="tags::json")
    op.alter_column('hypothesis', 'tags',
               existing_type=sa.VARCHAR(),
               type_=sa.JSON(),
               existing_nullable=True)
    op.drop_column('hypothesis', 'intent')
    op.add_column('intent_phrase', sa.Column('intent_stage', sa.String(), nullable=True))
    op.add_column('intent_phrase', sa.Column('intent_area', sa.String(), nullable=True))
    op.add_column('intent_phrase', sa.Column('specific_task', sa.String(), nullable=True))
    op.drop_constraint(op.f('_intent_phrase_uc'), 'intent_phrase', type_='unique')
    op.create_unique_constraint('_intent_phrase_uc', 'intent_phrase', ['intent_stage', 'intent_area', 'specific_task', 'phrase'])
    op.drop_column('intent_phrase', 'intent')
    op.drop_column('intent_phrase', 'author')
    op.drop_column('intent_phrase', 'example_type')
    op.add_column('workflow_task', sa.Column('message_id', sa.Integer(), nullable=True))
    op.add_column('workflow_task', sa.Column('step_order', sa.Integer(), nullable=True))
    op.add_column('workflow_task', sa.Column('engine', sa.String(), nullable=True))
    op.create_foreign_key(None, 'workflow_task', 'chat_message', ['message_id'], ['id'])
    op.drop_column('workflow_task', 'intent')
    op.drop_column('workflow_task', 'owner')
    op.drop_column('workflow_task', 'priority')
    op.drop_column('workflow_task', 'result')
    op.drop_column('workflow_task', 'step_id')
    op.drop_column('workflow_task', 'tags')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('workflow_task', sa.Column('tags', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('workflow_task', sa.Column('step_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('workflow_task', sa.Column('result', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('workflow_task', sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('workflow_task', sa.Column('owner', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('workflow_task', sa.Column('intent', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'workflow_task', type_='foreignkey')
    op.drop_column('workflow_task', 'engine')
    op.drop_column('workflow_task', 'step_order')
    op.drop_column('workflow_task', 'message_id')
    op.add_column('intent_phrase', sa.Column('example_type', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('intent_phrase', sa.Column('author', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('intent_phrase', sa.Column('intent', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint('_intent_phrase_uc', 'intent_phrase', type_='unique')
    op.create_unique_constraint(op.f('_intent_phrase_uc'), 'intent_phrase', ['intent', 'phrase'], postgresql_nulls_not_distinct=False)
    op.drop_column('intent_phrase', 'specific_task')
    op.drop_column('intent_phrase', 'intent_area')
    op.drop_column('intent_phrase', 'intent_stage')
    op.add_column('hypothesis', sa.Column('intent', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.alter_column('hypothesis', 'tags',
               existing_type=sa.JSON(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('hypothesis', 'hypothesis',
               existing_type=sa.TEXT(),
               nullable=False)
    op.drop_column('hypothesis', 'intent_area')
    op.drop_column('hypothesis', 'intent_stage')
    op.add_column('chat_session', sa.Column('meta', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.alter_column('chat_session', 'tags',
               existing_type=sa.JSON(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.add_column('chat_message', sa.Column('intent', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('chat_message', sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'chat_message', type_='foreignkey')
    op.drop_column('chat_message', 'specific_intent')
    op.drop_column('chat_message', 'intent_area')
    op.drop_column('chat_message', 'intent_stage')
    op.create_table('paper',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('arxiv_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('abstract', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('authors', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('venue', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('pdf_path', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('tags', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('embedding', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('paper_pkey'))
    )
    op.create_table('material',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('formula', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cif', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('properties', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('mp_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('structure_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('dimensionality', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('spacegroup', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('lattice_params', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('elements', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('bandgap', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('magnetic', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('tags', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('owner', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('material_pkey'))
    )
    op.create_table('task_object_phrase',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('object', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('phrase', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('tags', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('task_object_phrase_pkey'))
    )
    op.create_table('wiki',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('tags', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('embedding', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('wiki_pkey'))
    )
    op.drop_table('adsorption_structure')
    op.drop_table('slab_structure')
    op.drop_table('post_analysis')
    op.drop_table('job_schedule')
    op.drop_table('modification_structure')
    op.drop_table('calculation_parameter')
    op.drop_table('bulk_structure')
    # ### end Alembic commands ###
